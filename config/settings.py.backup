"""
Django settings for gestion_practicas project.

Generated by 'django-admin startproject' using Django 5.0.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path
from decouple import config
from datetime import timedelta
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY', default='django-insecure-change-me-in-production')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default=True, cast=bool)

# Allowed hosts configuration
ALLOWED_HOSTS = config('ALLOWED_HOSTS', default='localhost,127.0.0.1').split(',')

# Allowed email domains for user accounts
ALLOWED_EMAIL_DOMAINS = [d.strip() for d in config('ALLOWED_EMAIL_DOMAINS', default='upeu.edu.pe').split(',')]

# Application definition
DJANGO_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

THIRD_PARTY_APPS = [
    'rest_framework',
    'rest_framework_simplejwt',
    'graphene_django',
    'django_filters',
    'corsheaders',
    'django_extensions',
    'graphql_jwt.refresh_token',
    'axes',
    'drf_spectacular',
]

LOCAL_APPS = [
    'src.adapters.primary.graphql_api',
    'src.adapters.primary.rest_api',
    'src.adapters.secondary.database',
    'src.infrastructure.security',
]

INSTALLED_APPS = DJANGO_APPS + THIRD_PARTY_APPS + LOCAL_APPS

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'axes.middleware.AxesMiddleware',
    'src.infrastructure.middleware.rate_limit.RateLimitMiddleware',
    'src.infrastructure.middleware.security.SecurityMiddleware',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'

# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
    'NAME': config('DB_NAME', default='upeu_ppp_system'),
        'USER': config('DB_USER', default='upeu_admin'),
        'PASSWORD': config('DB_PASSWORD', default='upeu_contra_2024'),
        'HOST': config('DB_HOST', default='localhost'),
        'PORT': config('DB_PORT', default='5432'),
    }
}

# Axes configuration (basic)
AXES_ENABLED = True
AXES_FAILURE_LIMIT = config('AXES_FAILURE_LIMIT', default=30, cast=int)
AXES_COOLOFF_TIME = timedelta(hours=1)
AXES_LOCKOUT_PARAMETERS = ['username']
AXES_RESET_ON_SUCCESS = True

# Cache: LocMem por defecto (habilitar Redis con USE_REDIS_CACHE=True)
USE_REDIS_CACHE = config('USE_REDIS_CACHE', default=False, cast=bool)
if USE_REDIS_CACHE:
    CACHES = {
        'default': {
            'BACKEND': 'django_redis.cache.RedisCache',
            'LOCATION': config('REDIS_URL', default='redis://localhost:6379/0'),
            'OPTIONS': {
                'CLIENT_CLASS': 'django_redis.client.DefaultClient',
            }
        }
    }
else:
    CACHES = {
        'default': {
            'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
            'LOCATION': 'unique-dev-cache',
        }
    }

# Celery (asynchronous tasks)
CELERY_BROKER_URL = config('CELERY_BROKER_URL', default=config('REDIS_URL', default='redis://localhost:6379/0'))
CELERY_RESULT_BACKEND = config('CELERY_RESULT_BACKEND', default=CELERY_BROKER_URL)
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TASK_ALWAYS_EAGER = config('CELERY_TASK_ALWAYS_EAGER', default=DEBUG, cast=bool)
CELERY_TIMEZONE = config('CELERY_TIMEZONE', default='America/Lima')

# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        'OPTIONS': {
            'min_length': 8,
        }
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'es-pe'
TIME_ZONE = 'America/Lima'
USE_I18N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'
STATICFILES_DIRS = [BASE_DIR / 'static'] if (BASE_DIR / 'static').exists() else []

# Media files
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Authentication backends
AUTHENTICATION_BACKENDS = [
    'graphql_jwt.backends.JSONWebTokenBackend',
    'django.contrib.auth.backends.ModelBackend',
    'axes.backends.AxesStandaloneBackend',
]

# REST Framework configuration
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'src.infrastructure.security.cookie_jwt.CookieJWTAuthentication',
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 20,
    'DEFAULT_THROTTLE_CLASSES': [
        'rest_framework.throttling.AnonRateThrottle',
        'rest_framework.throttling.UserRateThrottle'
    ],
    'DEFAULT_THROTTLE_RATES': {
        'anon': '100/hour',
        'user': '1000/hour'
    },
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
    ],
    'DEFAULT_PARSER_CLASSES': [
        'rest_framework.parsers.JSONParser',
        'rest_framework.parsers.MultiPartParser',
        'rest_framework.parsers.FormParser',
    ],
}

# JWT Configuration
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=15),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=5),
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': False,
    'UPDATE_LAST_LOGIN': True,
    'ALGORITHM': 'HS256',
    'SIGNING_KEY': config('JWT_SECRET_KEY', default=SECRET_KEY),
    'VERIFYING_KEY': None,
    'AUDIENCE': None,
    'ISSUER': None,
    'AUTH_HEADER_TYPES': ('Bearer',),
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
}

# CORS settings
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "http://127.0.0.1:3000",
    "http://localhost:8080",
    "http://127.0.0.1:8080",
]

CORS_ALLOW_CREDENTIALS = True

# Security settings
SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True
X_FRAME_OPTIONS = 'DENY'

if not DEBUG:
    SECURE_SSL_REDIRECT = True
    SECURE_HSTS_SECONDS = 31536000
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True

# Session settings
SESSION_ENGINE = 'django.contrib.sessions.backends.cache'
SESSION_CACHE_ALIAS = 'default'
SESSION_COOKIE_AGE = config('SESSION_TIMEOUT_MINUTES', default=30, cast=int) * 60
SESSION_COOKIE_SECURE = not DEBUG
SESSION_COOKIE_HTTPONLY = True
SESSION_COOKIE_SAMESITE = 'Strict'

# Custom User Model
AUTH_USER_MODEL = 'database.User'

# File upload settings
FILE_UPLOAD_MAX_MEMORY_SIZE = config('MAX_FILE_SIZE', default=5242880, cast=int)  # 5MB
DATA_UPLOAD_MAX_MEMORY_SIZE = FILE_UPLOAD_MAX_MEMORY_SIZE

# Logging configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': BASE_DIR / 'logs' / 'django.log',
            'formatter': 'verbose',
        },
        'security': {
            'level': 'WARNING',
            'class': 'logging.FileHandler',
            'filename': BASE_DIR / 'logs' / 'security.log',
            'formatter': 'verbose',
        },
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['file', 'console'],
            'level': 'INFO',
            'propagate': True,
        },
        'security': {
            'handlers': ['security'],
            'level': 'WARNING',
            'propagate': False,
        },
    },
}

# GraphQL Configuration
GRAPHENE = {
    'SCHEMA': 'src.adapters.primary.graphql_api.schema.schema',
    'MIDDLEWARE': [
        'graphql_jwt.middleware.JSONWebTokenMiddleware',
    ],
}

# GraphQL JWT Configuration
GRAPHQL_JWT = {
    'JWT_ALGORITHM': 'HS256',
    'JWT_SECRET_KEY': config('JWT_SECRET_KEY', default=SECRET_KEY),
    'JWT_VERIFY_EXPIRATION': True,
    'JWT_LONG_RUNNING_REFRESH_TOKEN': True,
    'JWT_EXPIRATION_DELTA': timedelta(minutes=15),
    'JWT_REFRESH_EXPIRATION_DELTA': timedelta(days=5),
    'JWT_REUSE_REFRESH_TOKENS': True,
    # Allow unauthenticated access to these mutations
    'JWT_ALLOW_ANY_CLASSES': [
        'graphql_jwt.mutations.ObtainJSONWebToken',
        'graphql_jwt.mutations.Verify',
        'graphql_jwt.mutations.Refresh',
        'src.adapters.primary.graphql_api.mutations.TokenAuth',
        'src.adapters.primary.graphql_api.mutations.ForgotPassword',
        'src.adapters.primary.graphql_api.mutations.ResetPasswordWithCode',
    ],
    # Cookie settings for jwt_cookie decorator
    'JWT_COOKIE_SECURE': not DEBUG,
    'JWT_COOKIE_SAMESITE': 'Strict',
    'JWT_COOKIE_NAME': 'JWT',
    'JWT_REFRESH_TOKEN_COOKIE_NAME': 'JWT_REFRESH_TOKEN',
    # Usamos /api/ para que las cookies lleguen a REST (/api/v1/...) y GraphQL
    'JWT_COOKIE_PATH': '/api/',
}

# Cookie names para DRF (REST) usando SimpleJWT, para no chocar con la cookie de GraphQL
DRF_JWT_COOKIE_NAME = 'DRF_JWT'
DRF_JWT_REFRESH_COOKIE_NAME = 'DRF_JWT_REFRESH'

# Email configuration
EMAIL_BACKEND = config('EMAIL_BACKEND', default='django.core.mail.backends.smtp.EmailBackend')
EMAIL_HOST = config('EMAIL_HOST', default='smtp-relay.brevo.com')
EMAIL_PORT = config('EMAIL_PORT', default=587, cast=int)
EMAIL_HOST_USER = config('EMAIL_HOST_USER', default=config('BREVO_SMTP_USER', default=''))
EMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD', default=config('BREVO_SMTP_PASS', default=''))
EMAIL_USE_TLS = config('EMAIL_USE_TLS', default=True, cast=bool)
DEFAULT_FROM_EMAIL = config('DEFAULT_FROM_EMAIL', default='no-reply@upeu.edu.pe')
EMAIL_ENABLED = config('EMAIL_ENABLED', default=False, cast=bool)

# reCAPTCHA settings
# Nota: Secret visible solo para desarrollo temporal. En producción usar variables de entorno.
RECAPTCHA_ENABLED = config('RECAPTCHA_ENABLED', default=False, cast=bool)
RECAPTCHA_SECRET = config('RECAPTCHA_SECRET', default='6LeJF8srAAAAAD5yvB61_8lMb67T2ojpzB7roMHq')
# Token especial para bypass en desarrollo (GraphiQL/Postman) cuando DEBUG=True
RECAPTCHA_DEV_BYPASS_TOKEN = config('RECAPTCHA_DEV_BYPASS_TOKEN', default='dev-bypass')

# Frontend URL for password reset links
FRONTEND_URL = config('FRONTEND_URL', default='http://localhost:3000')

# Bootstrap de datos demo (usuarios por rol) tras migrate si está activo
BOOTSTRAP_DEMO_DATA = config('BOOTSTRAP_DEMO_DATA', default=False, cast=bool)

# Admin por defecto (creación si no existe)
DEFAULT_ADMIN_EMAIL = config('DEFAULT_ADMIN_EMAIL', default='admin@upeu.edu.pe')
DEFAULT_ADMIN_PASSWORD = config('DEFAULT_ADMIN_PASSWORD', default='Admin123!')

# Create logs directory
os.makedirs(BASE_DIR / 'logs', exist_ok=True)

# drf-spectacular settings
SPECTACULAR_SETTINGS = {
    'TITLE': 'API - Sistema de Prácticas UPeU',
    'DESCRIPTION': 'API REST para gestión de prácticas profesionales',
    'VERSION': '2.0.0',
    'SERVE_INCLUDE_SCHEMA': False,
    'COMPONENT_SPLIT_REQUEST': True,
    'SWAGGER_UI_SETTINGS': {
        'deepLinking': True,
        'persistAuthorization': True,
        'displayRequestDuration': True,
    },
}

# Eliminar contenido markdown no válido

- ✅ **5 Roles de Usuario**: Practicante, Supervisor, Coordinador, Secretaria, Administrador
- ✅ **Gestión Completa de Prácticas**: Solicitud, seguimiento, evaluación y certificación
- ✅ **Dashboards Personalizados**: Por cada rol con métricas en tiempo real
- ✅ **Reportes Avanzados**: Exportación en JSON, Excel y CSV
- ✅ **Sistema de Documentos**: Carga, validación y aprobación
- ✅ **Notificaciones**: Alertas automáticas por email
- ✅ **Seguridad Robusta**: JWT, permisos basados en roles, rate limiting
- ✅ **Gráficos y Estadísticas**: Chart.js compatible

## 🌐 APIs Disponibles

### REST API v1 (Legacy)
- Endpoints básicos de autenticación, usuarios, prácticas y empresas
- Base URL: `/api/v1/`

### REST API v2 (ViewSets Completos)
- **ViewSets principales** (65+ endpoints)
- **Dashboards especializados** (6 endpoints por rol)
- **Reportes con exportación** (5 endpoints con filtros)
- Base URL: `/api/v2/`

### GraphQL API
- **Queries avanzadas** (50+ queries con paginación Relay)
- **Mutations CRUD** (30+ mutations con validaciones)
- Base URL: `/graphql/`

## 🔐 Autenticación

Este API utiliza **JWT (JSON Web Tokens)** para autenticación:

1. **Obtener Token**: `POST /api/v1/auth/login/`
2. **Usar Token**: Incluir header `Authorization: Bearer {token}`
3. **Refresh Token**: `POST /api/v1/auth/refresh/`

## 👥 Roles y Permisos

| Rol | Descripción | Permisos |
|-----|-------------|----------|
| **PRACTICANTE** | Estudiante | Ver prácticas propias, cargar documentos, ver progreso |
| **SUPERVISOR** | Empresa | Evaluar practicantes, registrar horas, aprobar informes |
| **COORDINADOR** | Académico | Aprobar solicitudes, asignar supervisores, reportes globales |
| **SECRETARIA** | Administrativa | Validar documentos, registrar empresas y estudiantes |
| **ADMINISTRADOR** | Sistema | Acceso total, configuración, auditoría |

## 📊 Endpoints Principales

### Dashboards (API v2)
- `GET /api/v2/dashboards/general/` - Dashboard general (Coordinador/Admin)
- `GET /api/v2/dashboards/student/` - Dashboard estudiante
- `GET /api/v2/dashboards/supervisor/` - Dashboard supervisor
- `GET /api/v2/dashboards/secretary/` - Dashboard secretaria
- `GET /api/v2/dashboards/statistics/` - Estadísticas avanzadas
- `GET /api/v2/dashboards/charts/` - Datos para gráficos

### Reportes (API v2)
- `GET /api/v2/reports/practices/` - Reporte de prácticas (Excel, CSV)
- `GET /api/v2/reports/students/` - Reporte de estudiantes
- `GET /api/v2/reports/companies/` - Reporte de empresas
- `GET /api/v2/reports/statistics_summary/` - Resumen estadístico
- `GET /api/v2/reports/{id}/certificate/` - Certificado de práctica

## 🛠️ Stack Tecnológico

- **Backend**: Python 3.10+, Django 5.0+, DRF 3.15+
- **Bases de Datos**: PostgreSQL, Redis, MongoDB
- **API**: REST (DRF) + GraphQL (Graphene)
- **Autenticación**: JWT
- **Documentación**: OpenAPI 3.0 (Swagger/ReDoc)
- **Testing**: pytest (88% cobertura)

## 📚 Documentación Completa

- **Guía de Usuario**: `/docs/GUIA_USUARIO.md`
- **Guía de Desarrollo**: `/docs/GUIA_DESARROLLO.md`
- **Guía de Testing**: `/docs/GUIA_TESTING.md`
- **Deployment Guide**: `/docs/DEPLOYMENT_GUIDE.md`
- **API Dashboards**: `/src/adapters/primary/rest_api/views/README_DASHBOARDS.md`
- **GraphQL API**: `/docs/README_GraphQL.md`

## 📞 Soporte

- **Email**: soporte.practicas@upeu.edu.pe
- **GitHub**: https://github.com/AaronAP1/DJGRedis.PA
- **Universidad**: Universidad Peruana Unión

## 📄 Licencia

Proyecto de Tesis - Ingeniería de Sistemas - UPeU

---

**Version 2.0** - Octubre 2024  
**Status**: ✅ Production Ready  
**Arquitectura**: Hexagonal (Clean Architecture)
    ''',
    'VERSION': '2.0.0',
    'SERVE_INCLUDE_SCHEMA': False,
    'CONTACT': {
        'name': 'Universidad Peruana Unión - Soporte Técnico',
        'email': 'soporte.practicas@upeu.edu.pe',
        'url': 'https://github.com/AaronAP1/DJGRedis.PA',
    },
    'LICENSE': {
        'name': 'Proyecto de Tesis - Universidad Peruana Unión',
        'url': 'https://upeu.edu.pe',
    },
    'EXTERNAL_DOCS': {
        'description': 'Documentación Completa del Proyecto',
        'url': 'https://github.com/AaronAP1/DJGRedis.PA/tree/master/docs',
    },
    'TAGS': [
        {
            'name': 'Autenticación',
            'description': 'Endpoints de login, logout, refresh token y gestión de sesiones. Utiliza JWT para autenticación stateless.',
        },
        {
            'name': 'Usuarios',
            'description': 'Gestión de usuarios del sistema. CRUD completo con permisos basados en roles (PRACTICANTE, SUPERVISOR, COORDINADOR, SECRETARIA, ADMINISTRADOR).',
        },
        {
            'name': 'Estudiantes',
            'description': 'Gestión de estudiantes/practicantes. Incluye registro, actualización de datos académicos, consulta de prácticas y progreso.',
        },
        {
            'name': 'Empresas',
            'description': 'Gestión de empresas que ofrecen prácticas. Incluye validación de RUC, sectores económicos y convenios.',
        },
        {
            'name': 'Supervisores',
            'description': 'Gestión de supervisores de empresas. Asignación a prácticas y permisos de evaluación.',
        },
        {
            'name': 'Prácticas',
            'description': 'Core del sistema. Gestión completa del ciclo de vida de una práctica: solicitud, aprobación, seguimiento, evaluación y certificación.',
        },
        {
            'name': 'Documentos',
            'description': 'Gestión de documentos requeridos: cartas de presentación, informes mensuales, constancias, etc. Incluye validación y aprobación.',
        },
        {
            'name': 'Notificaciones',
            'description': 'Sistema de notificaciones por email y en plataforma. Alertas automáticas para eventos importantes.',
        },
        {
            'name': 'Dashboards',
            'description': 'Dashboards personalizados por rol con métricas en tiempo real, estadísticas y gráficos. Incluye datos para Chart.js.',
        },
        {
            'name': 'Reportes',
            'description': 'Generación de reportes avanzados con filtros. Exportación en múltiples formatos: JSON, Excel (.xlsx), CSV.',
        },
        {
            'name': 'Importación/Exportación',
            'description': 'Endpoints para importar usuarios masivamente desde Excel y exportar datos del sistema.',
        },
        {
            'name': 'C4 Models',
            'description': 'Visualización de arquitectura del sistema con diagramas C4 (Context, Containers, Components, Code).',
        },
    ],
    # Usa servidor relativo para que Swagger ejecute requests contra el mismo host
    'SERVERS': [
        {
            'url': '/',
            'description': 'Servidor actual (desarrollo/producción)',
        },
        {
            'url': 'http://localhost:8000',
            'description': 'Servidor local de desarrollo',
        },
    ],
    # Configuración de seguridad JWT
    'SECURITY': [
        {
            'BearerAuth': [],
        }
    ],
    'COMPONENT_SPLIT_REQUEST': True,
    'COMPONENT_NO_READ_ONLY_REQUIRED': True,
    # Swagger UI Settings
    'SWAGGER_UI_SETTINGS': {
        'deepLinking': True,
        'persistAuthorization': True,
        'displayOperationId': False,
        'displayRequestDuration': True,
        'docExpansion': 'none',
        'filter': True,
        'showExtensions': True,
        'showCommonExtensions': True,
        'defaultModelsExpandDepth': 2,
        'defaultModelExpandDepth': 2,
        'tryItOutEnabled': True,
        'requestSnippetsEnabled': True,
        'syntaxHighlight': {
            'activate': True,
            'theme': 'monokai',
        },
    },
    # ReDoc Settings
    'REDOC_UI_SETTINGS': {
        'hideDownloadButton': False,
        'expandResponses': '200,201',
        'pathInMiddlePanel': True,
        'nativeScrollbars': True,
        'theme': {
            'colors': {
                'primary': {
                    'main': '#1976d2',
                },
            },
            'typography': {
                'fontSize': '14px',
                'fontFamily': '"Roboto", sans-serif',
                'headings': {
                    'fontFamily': '"Roboto", sans-serif',
                },
            },
        },
    },
    # Configuración de esquema
    'SCHEMA_PATH_PREFIX': r'/api/v[0-9]',
    'SCHEMA_PATH_PREFIX_TRIM': True,
    'SERVE_PERMISSIONS': ['rest_framework.permissions.AllowAny'],
    'SERVE_AUTHENTICATION': [],
    'PREPROCESSING_HOOKS': [],
    'POSTPROCESSING_HOOKS': [],
    # Incluir operaciones de GraphQL en el schema (opcional)
    'APPEND_COMPONENTS': {
        'securitySchemes': {
            'BearerAuth': {
                'type': 'http',
                'scheme': 'bearer',
                'bearerFormat': 'JWT',
                'description': 'Ingresa tu token JWT en el formato: Bearer {token}',
            }
        }
    },
}
