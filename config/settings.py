"""
Django settings for gestion_practicas project.

Generated by 'django-admin startproject' using Django 5.0.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path
from decouple import config
from datetime import timedelta
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY', default='django-insecure-change-me-in-production')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default=True, cast=bool)

# Allowed hosts configuration
ALLOWED_HOSTS = config('ALLOWED_HOSTS', default='localhost,127.0.0.1').split(',')

# Allowed email domains for user accounts
ALLOWED_EMAIL_DOMAINS = [d.strip() for d in config('ALLOWED_EMAIL_DOMAINS', default='upeu.edu.pe').split(',')]

# Application definition
DJANGO_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

THIRD_PARTY_APPS = [
    'rest_framework',
    'rest_framework_simplejwt',
    'rest_framework_simplejwt.token_blacklist',  # Para token tracking JWT
    'graphene_django',
    'django_filters',
    'corsheaders',
    'django_extensions',
    'axes',
    'drf_spectacular',
]

LOCAL_APPS = [
    'src.adapters.primary.graphql_api',
    'src.adapters.primary.rest_api',
    'src.adapters.secondary.database',
    'src.infrastructure.security',
]

INSTALLED_APPS = DJANGO_APPS + THIRD_PARTY_APPS + LOCAL_APPS

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'src.infrastructure.middleware.security_headers.SecurityHeadersMiddleware',
    'src.infrastructure.middleware.security_headers.XSSProtectionMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'src.infrastructure.middleware.jwt_auth.JWTAuthenticationMiddleware',
    'src.infrastructure.middleware.jwt_auth.JWTCookieMiddleware',  # Para establecer cookies JWT
    'axes.middleware.AxesMiddleware',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'

# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
    'NAME': config('DB_NAME', default='upeu_ppp_system'),
        'USER': config('DB_USER', default='upeu_admin'),
        'PASSWORD': config('DB_PASSWORD', default='upeu_contra_2024'),
        'HOST': config('DB_HOST', default='localhost'),
        'PORT': config('DB_PORT', default='5432'),
    }
}

# Axes configuration (basic)
AXES_ENABLED = True
AXES_FAILURE_LIMIT = config('AXES_FAILURE_LIMIT', default=30, cast=int)
AXES_COOLOFF_TIME = timedelta(hours=1)
AXES_LOCKOUT_PARAMETERS = ['username']
AXES_RESET_ON_SUCCESS = True

# Cache: LocMem por defecto (habilitar Redis con USE_REDIS_CACHE=True)
USE_REDIS_CACHE = config('USE_REDIS_CACHE', default=False, cast=bool)
if USE_REDIS_CACHE:
    CACHES = {
        'default': {
            'BACKEND': 'django_redis.cache.RedisCache',
            'LOCATION': config('REDIS_URL', default='redis://localhost:6379/0'),
            'OPTIONS': {
                'CLIENT_CLASS': 'django_redis.client.DefaultClient',
            }
        }
    }
else:
    CACHES = {
        'default': {
            'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
            'LOCATION': 'unique-dev-cache',
        }
    }

# Celery (asynchronous tasks)
CELERY_BROKER_URL = config('CELERY_BROKER_URL', default=config('REDIS_URL', default='redis://localhost:6379/0'))
CELERY_RESULT_BACKEND = config('CELERY_RESULT_BACKEND', default=CELERY_BROKER_URL)
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TASK_ALWAYS_EAGER = config('CELERY_TASK_ALWAYS_EAGER', default=DEBUG, cast=bool)
CELERY_TIMEZONE = config('CELERY_TIMEZONE', default='America/Lima')

# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        'OPTIONS': {
            'min_length': 8,
        }
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'es-pe'
TIME_ZONE = 'America/Lima'
USE_I18N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'
STATICFILES_DIRS = [BASE_DIR / 'static'] if (BASE_DIR / 'static').exists() else []

# Media files
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Authentication backends
AUTHENTICATION_BACKENDS = [
    'src.infrastructure.security.auth_backends.UsernameOnlyBackend',  # PRINCIPAL: SOLO Username
    'axes.backends.AxesStandaloneBackend',  # Protección brute force
]

# REST Framework configuration
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',  # JWT PURO para API
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 20,
    'DEFAULT_THROTTLE_CLASSES': [
        'rest_framework.throttling.AnonRateThrottle',
        'rest_framework.throttling.UserRateThrottle'
    ],
    'DEFAULT_THROTTLE_RATES': {
        'anon': '100/hour',           # Usuarios anónimos
        'user': '1000/hour',          # Usuarios autenticados
        'login': '10/min',            # Intentos de login
        'password_reset': '5/hour',   # Reset de contraseña
        'graphql': '200/hour',        # Consultas GraphQL
    },
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
    ],
    'DEFAULT_PARSER_CLASSES': [
        'rest_framework.parsers.JSONParser',
        'rest_framework.parsers.MultiPartParser',
        'rest_framework.parsers.FormParser',
    ],
}

# JWT Configuration (Sistema JWT PURO)
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=config('JWT_ACCESS_TOKEN_LIFETIME', default=15, cast=int)),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=config('JWT_REFRESH_TOKEN_LIFETIME', default=5, cast=int)),
    'ROTATE_REFRESH_TOKENS': config('JWT_ROTATE_REFRESH_TOKENS', default=False, cast=bool),
    'BLACKLIST_AFTER_ROTATION': False,
    'ALGORITHM': 'HS256',
    'SIGNING_KEY': config('JWT_SECRET_KEY', default=SECRET_KEY),
    'VERIFYING_KEY': None,
    'AUDIENCE': None,
    'ISSUER': None,
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    
    # Configuración de cookies HttpOnly con nombres custom
    'AUTH_COOKIE': 'djgredis_session',     # Access token
    'AUTH_COOKIE_REFRESH': 'djgredis_auth', # Refresh token
    'AUTH_COOKIE_HTTP_ONLY': True,
    'AUTH_COOKIE_SECURE': not DEBUG,
    'AUTH_COOKIE_SAMESITE': 'Lax' if DEBUG else 'None',
    'AUTH_COOKIE_PATH': '/',
    'AUTH_COOKIE_DOMAIN': None,
}

# JWT Authentication Settings (configuración ya está en SIMPLE_JWT arriba)

# CORS settings
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "http://127.0.0.1:3000",
    "http://localhost:8080",
    "http://127.0.0.1:8080",
    "http://localhost:4200",  # Angular frontend
    "http://127.0.0.1:4200",
]

CORS_ALLOW_CREDENTIALS = True

# CSRF Configuration
CSRF_TRUSTED_ORIGINS = [
    "http://localhost:3000",
    "http://127.0.0.1:3000", 
    "http://localhost:8080",
    "http://127.0.0.1:8080",
    "http://localhost:4200",  # Angular frontend
    "http://127.0.0.1:4200",
]

# URLs Base
BASE_URL_FRONTEND = config('BASE_URL_FRONTEND', default="http://localhost:4200/")
BASE_URL_BACKEND = config('BASE_URL_BACKEND', default="http://localhost:8000/api/v1/")
BASE_URL_BACKEND_SHORT = config('BASE_URL_BACKEND_SHORT', default="http://localhost:8000/")

# === Configuración JWT PURO ===
# Toda la configuración JWT está en SIMPLE_JWT arriba

# Configuración CSRF y Sesiones
SESSION_COOKIE_SECURE = not DEBUG
CSRF_COOKIE_SECURE = not DEBUG
SESSION_COOKIE_SAMESITE = 'Lax' if DEBUG else 'None'
CSRF_COOKIE_SAMESITE = 'Lax' if DEBUG else 'None'
CSRF_COOKIE_HTTPONLY = False  # El frontend debe poder leer 'csrftoken' para enviar X-CSRFToken
CSRF_COOKIE_NAME = 'csrftoken'

# Duración de la cookie de sesión de Django (admin, sesiones basadas en sesión)
# 5 días en segundos y persistente aunque se cierre el navegador
SESSION_COOKIE_AGE = 60 * 60 * 24 * 5  # 5 días como JWT
SESSION_EXPIRE_AT_BROWSER_CLOSE = False

# Security settings
SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True
X_FRAME_OPTIONS = 'DENY'
# Configuración adicional de seguridad XSS
SECURE_REFERRER_POLICY = 'strict-origin-when-cross-origin'
SECURE_CROSS_ORIGIN_OPENER_POLICY = 'same-origin'

# Configuración de sanitización
XSS_LOG_ATTEMPTS = config('XSS_LOG_ATTEMPTS', default=True, cast=bool)

# Sistema JWT PURO
JWT_PURE_ENABLED = config('JWT_PURE_ENABLED', default=True, cast=bool)

# Sistema JWT PURO
# Configuración eliminada de sesiones opacas - ahora es JWT puro
SESSION_AUTH_MAX_AGE = config('SESSION_AUTH_MAX_AGE', default=5 * 24 * 60 * 60, cast=int)  # 5 días
if not DEBUG:
    SECURE_SSL_REDIRECT = True
    SECURE_HSTS_SECONDS = 31536000
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True

# Session settings
SESSION_ENGINE = 'django.contrib.sessions.backends.cache'
SESSION_CACHE_ALIAS = 'default'
SESSION_COOKIE_AGE = config('SESSION_TIMEOUT_MINUTES', default=30, cast=int) * 60
SESSION_COOKIE_SECURE = not DEBUG
SESSION_COOKIE_HTTPONLY = True
SESSION_COOKIE_SAMESITE = 'Strict'

# Custom User Model
AUTH_USER_MODEL = 'database.User'

# File upload settings
FILE_UPLOAD_MAX_MEMORY_SIZE = config('MAX_FILE_SIZE', default=5242880, cast=int)  # 5MB
DATA_UPLOAD_MAX_MEMORY_SIZE = FILE_UPLOAD_MAX_MEMORY_SIZE

# Logging configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': BASE_DIR / 'logs' / 'django.log',
            'formatter': 'verbose',
        },
        'security': {
            'level': 'WARNING',
            'class': 'logging.FileHandler',
            'filename': BASE_DIR / 'logs' / 'security.log',
            'formatter': 'verbose',
        },
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['file', 'console'],
            'level': 'INFO',
            'propagate': True,
        },
        'security': {
            'handlers': ['security'],
            'level': 'WARNING',
            'propagate': False,
        },
    },
}

# GraphQL Configuration (Sistema JWT PURO)
GRAPHENE = {
    'SCHEMA': 'src.adapters.primary.graphql_api.schema.schema',
    # 'MIDDLEWARE': [
    #     'graphql_jwt.middleware.JSONWebTokenMiddleware',
    # ],
}

# Email configuration
EMAIL_BACKEND = config('EMAIL_BACKEND', default='django.core.mail.backends.smtp.EmailBackend')
EMAIL_HOST = config('EMAIL_HOST', default='smtp-relay.brevo.com')
EMAIL_PORT = config('EMAIL_PORT', default=587, cast=int)
EMAIL_HOST_USER = config('EMAIL_HOST_USER', default=config('BREVO_SMTP_USER', default=''))
EMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD', default=config('BREVO_SMTP_PASS', default=''))
EMAIL_USE_TLS = config('EMAIL_USE_TLS', default=True, cast=bool)
DEFAULT_FROM_EMAIL = config('DEFAULT_FROM_EMAIL', default='no-reply@upeu.edu.pe')
EMAIL_ENABLED = config('EMAIL_ENABLED', default=False, cast=bool)

# Cloudflare Turnstile settings
CLOUDFLARE_TURNSTILE_ENABLED = config('CLOUDFLARE_TURNSTILE_ENABLED', default=False, cast=bool)
CLOUDFLARE_TURNSTILE_SITE_KEY = config('CLOUDFLARE_TURNSTILE_SITE_KEY', default='')
CLOUDFLARE_TURNSTILE_SECRET_KEY = config('CLOUDFLARE_TURNSTILE_SECRET_KEY', default='')

# CSP (Content Security Policy) settings
CSP_ENABLED = config('CSP_ENABLED', default=True, cast=bool)

# Frontend URL for password reset links
FRONTEND_URL = config('FRONTEND_URL', default='http://localhost:3000')

# Bootstrap de datos demo (usuarios por rol) tras migrate si está activo
BOOTSTRAP_DEMO_DATA = config('BOOTSTRAP_DEMO_DATA', default=False, cast=bool)

# Admin por defecto (creación si no existe)
DEFAULT_ADMIN_EMAIL = config('DEFAULT_ADMIN_EMAIL', default='admin@upeu.edu.pe')
DEFAULT_ADMIN_PASSWORD = config('DEFAULT_ADMIN_PASSWORD', default='Admin123!')

# Create logs directory
os.makedirs(BASE_DIR / 'logs', exist_ok=True)

# drf-spectacular settings
SPECTACULAR_SETTINGS = {
    'TITLE': 'API - Sistema de Prácticas UPeU',
    'DESCRIPTION': 'API REST para gestión de prácticas profesionales',
    'VERSION': '2.0.0',
    'SERVE_INCLUDE_SCHEMA': False,
    'COMPONENT_SPLIT_REQUEST': True,
    'SWAGGER_UI_SETTINGS': {
        'deepLinking': True,
        'persistAuthorization': True,
        'displayRequestDuration': True,
    },
}

